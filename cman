#!/bin/bash

function main {

  # Snippet from SO user Dave Dopson http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
  SOURCE="${BASH_SOURCE[0]}"
  # resolve $SOURCE until the file is no longer a symlink
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if $SOURCE was a relative symlink, we need to resolve it
    # relative to the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  WALLPAPER_DIR=${WALLPAPER_DIR:-~/img/wallpapers/}
	COLORS_DIR=${COLORS_DIR:-~/dotfiles/colors/}

  while test $# -gt 0; do
      case "$1" in
          usage | -h | --help)
              shift
              usage
              ;;
					generate)
              shift
              generate $*
              ;;
          change)
              shift
              change $*
              ;;
					format)
							shift
							format $*
							;;
					colorselect)
							shift
							colorselect
							;;
					dotshare)
							shift
							dotshare $*
							;;
          colors)
              shift
              colors
              ;;
					digdug)
							shift
							digdug
							;;
					colors2)
						  shift
							colors2
							;;
          *)
              shift
              indent "$1 is not a recognised directive"
              ;;
      esac
  done
}

function indent {
  echo ":: $*"
}

function dotshare {
	if [ 0 = $# ]; then
		indent "No dotshare ID argument provided"
		exit 1
	fi

	dot="$1"
	echo ":: Downloading and formatting http://dotshare.it/dots/$dot"
	python2 $DIR/py/dotshare.py $dot
	exit 0
}

function format {
	if [ 1 = $# ]; then
		indent "Usage: ./cman format {path-to-file} {name-of-colorscheme}"
		exit 1
	fi

	dot="$1"
	echo ":: Formatting $1 to $2"
	python2 $DIR/py/read.py $dot $2
	exit 0
}

function colorselect {
	scheme=$(cd $COLORS_DIR && ls *.colors | dmenu)
	test -h ~/.colors && unlink ~/.colors
	test -h ~/.colorsX && unlink ~/.colorsX
	echo "$scheme"
	ln -s $COLORS_DIR$scheme ~/.colors
	scheme+="X"
	echo "$scheme"
	ln -s $COLORS_DIR$scheme ~/.colorsX
	xrdb -merge ~/.Xresources
}

function generate {
  if [ 0 = $# ]; then
    indent "No file argument provided"
    exit 1
  fi

  files=$*

  for file in $files; do
    if [ ! -f $file ]; then
      indent "File '$file' doesn't exist"
      exit 1
    fi
  done

  for file in $*; do
    echo ":: Generating $file.colors and $file.colorsX to $COLORS_DIR"
    python2 $DIR/py/color_detect.py -l $COLORS_DIR $file
  done
	exit 0
}

function change {
  #:: Select a random background from WALLPAPER_DIR, or use the passed background
  if [ -z $1 ]; then
    background=$(find $WALLPAPER_DIR -type f \( -name '*.jpg' -o -name '*.png' \) | shuf -n1)
  else
    background=$WALLPAPER_DIR/$1

    if [ ! -f $background ]; then
      indent "$1 does not exist in $WALLPAPER_DIR"
      exit 1
    fi
  fi

  if [ -f ${background}.colorsX ] || [ -f ${background}.colors ]; then
    indent "Could not find ${background}.colorsX or ${background}.colors"
    exit 1
  fi

  filename=$(basename $background)
  dirname=$(dirname $background)

  #:: Set the background
  feh --bg-fill $background

  #:: Record the current background
  set_current $background

  if [ $? -ne 0 ]; then
    indent "Failed to set $background as background"
  else
    indent "Set $background as background"

    #:: Set the colorscheme
    ln -f ${dirname}/.${filename}.colors ~/.colors
    xrdb -merge ${dirname}/.${filename}.colorsX
  fi
}

function colors2 {
  # Original: http://frexx.de/xterm-256-notes/
  #           http://frexx.de/xterm-256-notes/data/colortable16.sh
  # Modified by Aaron Griffin
  # and further by Kazuo Teramoto
  FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  BGNAMES=('DFT' 'BLK' 'RED' 'GRN' 'YEL' 'BLU' 'MAG' 'CYN' 'WHT')

  echo "     ┌──────────────────────────────────────────────────────────────────────────┐"
  for b in {0..8}; do
    ((b>0)) && bg=$((b+39))

    echo -en "\033[0m ${BGNAMES[b]} │ "

    for f in {0..7}; do
      echo -en "\033[${bg}m\033[$((f+30))m ${FGNAMES[f]} "
    done

    echo -en "\033[0m │"
    echo -en "\033[0m\n\033[0m     │ "

    for f in {0..7}; do
      echo -en "\033[${bg}m\033[1;$((f+30))m ${FGNAMES[f]} "
    done

    echo -en "\033[0m │"
    echo -e "\033[0m"

    ((b<8)) &&
    echo "     ├──────────────────────────────────────────────────────────────────────────┤"
  done
  echo "     └──────────────────────────────────────────────────────────────────────────┘"
}

function colors {
	source ~/.colors
	VALS=( $COLOR1 $COLOR2 $COLOR3 $COLOR4 $COLOR5 $COLOR6 $COLOR7 $COLOR8 $COLOR9 $COLOR10 $COLOR11 $COLOR12 $COLOR13 $COLOR14 $COLOR15 )
	for i in {0..7};
	do
		TRUE=$(echo "$i - 1" | bc)
		echo -e "\e[0;3${i}mCOLOR$i\t⣿⣿⣿⣿⣿⣿⣿⣿ ${VALS[$TRUE]}\e[0m"
	done
	for i in {0..7};
	do
		TRUE=$(echo "$i + 8" | bc)
		INDX=$(echo "$i + 7" | bc)
		echo -e "\e[1;3${i}mCOLOR$TRUE\t⣿⣿⣿⣿⣿⣿⣿⣿ ${VALS[$INDX]}\e[0m"
	done
}

function digdug {
	esc=""
	blackf="${esc}[30m";   redf="${esc}[31m";    greenf="${esc}[32m"
	yellowf="${esc}[33m"   bluef="${esc}[34m";   purplef="${esc}[35m"
	cyanf="${esc}[36m";    whitef="${esc}[37m"
	blackb="${esc}[40m";   redb="${esc}[41m";    greenb="${esc}[42m"
	yellowb="${esc}[43m"   blueb="${esc}[44m";   purpleb="${esc}[45m"
	cyanb="${esc}[46m";    whiteb="${esc}[47m"
	boldon="${esc}[1m";    boldoff="${esc}[22m"
	italicson="${esc}[3m"; italicsoff="${esc}[23m"
	ulon="${esc}[4m";      uloff="${esc}[24m"
	invon="${esc}[7m";     invoff="${esc}[27m"
	reset="${esc}[0m"
	echo "${boldon}${whitef}    ▄▄▄${reset}"
	echo "${boldon}${whitef} ▄█████▄▄ ${reset}"
	echo "${boldon}${whitef}███${cyanb}▀▀▀▀${blackb}▀${cyanb}▀${blackb}▀${cyanb}▀${reset}"
	echo "${boldon}${whitef}███${cyanb}▄   ${boldoff}${blackf}▀ ▀${reset}${cyanf}▀${reset}"
	echo "${boldon}${whitef} ▄${cyanb}  ${reset}${boldon}${whitef}█████▄ ${boldoff}${redf}█▄${reset}"
	echo "${boldoff}${redf}▀▀${reset}${boldon}${redb}${whitef}▄${cyanb}▄   ${redb}▄▄▄${reset}${boldoff}${redf}▀██▀${reset}"
	echo "${boldon}${whitef} ██▀▀▀██▀  ${boldoff}${redf}▀${reset}"
	echo "${boldon}${whitef} ▀▀▀▀ ▀▀▀▀${reset}"
}

function usage {
  printf "%b" "  $0 [action] [options]

Actions
- usage:                Print this help message.
- generate [file]...:   Generate a new set of colors from a given image or set of images
- change [file]:        Set the wallpaper to file, or a random wallpaper
- dotshare [dot-id]:    Download a dot from dotshare.it, put it in your color folder
- colorselect:          Select a colorscheme through the use of dmenu
- colors:               Display the current set of colors.
- morecolors:           Display the current set of colors in a different way.
- format:               Read in a file in the filesystem into a new colorscheme
"
}

main $*
